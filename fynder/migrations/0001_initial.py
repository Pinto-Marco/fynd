# Generated by Django 5.1.7 on 2025-06-01 15:53

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FynderTypesCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SignUpAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.CharField(max_length=200)),
                ('interest_culture_heritage', models.FloatField(default=0.0, help_text='Interest level in Culture & Heritage (0-0.5-1)')),
                ('interest_nature_outdoors', models.FloatField(default=0.0, help_text='Interest level in Nature & Outdoors (0-0.5-1)')),
                ('interest_food_gastronomy', models.FloatField(default=0.0, help_text='Interest level in Food & Gastronomy (0-0.5-1)')),
                ('interest_nightlife_party', models.FloatField(default=0.0, help_text='Interest level in Nightlife & Party (0-0.5-1)')),
                ('interest_wellness_spa', models.FloatField(default=0.0, help_text='Interest level in Wellness & Spa (0-0.5-1)')),
            ],
        ),
        migrations.CreateModel(
            name='SignUpFynderAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SignUpQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200)),
                ('weight', models.FloatField(default=1.0)),
                ('max_number_of_answers', models.IntegerField(default=4)),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fynder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('password', models.CharField(max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('has_new_letter', models.BooleanField(default=False)),
                ('gender', models.CharField(choices=[('male', 'male'), ('female', 'female'), ('other', 'other'), ('prefer_not_to_say', 'prefer_not_to_say')], default='prefer_not_to_say', max_length=17)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('country_of_origin', models.CharField(blank=True, max_length=100, null=True)),
                ('is_vegetarian', models.BooleanField(default=False)),
                ('is_vegan', models.BooleanField(default=False)),
                ('interest_culture_heritage', models.FloatField(default=0.0, help_text='Interest level in Culture & Heritage (0-100)')),
                ('interest_nature_outdoors', models.FloatField(default=0.0, help_text='Interest level in Nature & Outdoors (0-100)')),
                ('interest_food_gastronomy', models.FloatField(default=0.0, help_text='Interest level in Food & Gastronomy (0-100)')),
                ('interest_nightlife_party', models.FloatField(default=0.0, help_text='Interest level in Nightlife & Party (0-100)')),
                ('interest_wellness_spa', models.FloatField(default=0.0, help_text='Interest level in Wellness & Spa (0-100)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fynder_2', to=settings.AUTH_USER_MODEL)),
                ('fynder_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fynder_1', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FynderFoodPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(choices=[('Any', 'Any'), ('Pescatarian', 'Pescatarian'), ('Halal', 'Halal'), ('Kosher', 'Kosher')], default='any', max_length=20)),
                ('fynder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
